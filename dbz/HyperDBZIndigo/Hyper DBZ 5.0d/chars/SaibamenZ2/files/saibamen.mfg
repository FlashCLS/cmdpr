; The CMD file.
;
; Two parts: 1. Command definition and  2. State entry
; (state entry is after the commands def section)
;
; 1. Command definition
; ---------------------
; Note: The commands are CASE-SENSITIVE, and so are the command names.
; The eight directions are:
;   B, DB, D, DF, F, UF, U, UB     (all CAPS)
;   corresponding to back, down-back, down, downforward, etc.
; The six buttons are:
;   a, b, c, x, y, z               (all lower case)
;   In default key config, abc are are the bottom, and xyz are on the
;   top row. For 2 button characters, we recommend you use a and b.
;   For 6 button characters, use abc for kicks and xyz for punches.
;
; Each [Command] section defines a command that you can use for
; state entry, as well as in the CNS file.
; The command section should look like:
;
;   [Command]
;   name = some_name
;   command = the_command
;   time = time (optional)
;   buffer.time = time (optional)
;
; - some_name
;   A name to give that command. You'll use this name to refer to
;   that command in the state entry, as well as the CNS. It is case-
;   sensitive (QCB_a is NOT the same as Qcb_a or QCB_A).
;
; - command
;   list of buttons or directions, separated by commas. Each of these
;   buttons or directions is referred to as a "symbol".
;   Directions and buttons can be preceded by special characters:
;   slash (/) - means the key must be held down
;          egs. command = /D       ;hold the down direction
;               command = /DB, a   ;hold down-back while you press a
;   tilde (~) - to detect key releases
;          egs. command = ~a       ;release the a button
;               command = ~D, F, a ;release down, press fwd, then a
;          If you want to detect "charge moves", you can specify
;          the time the key must be held down for (in game-ticks)
;          egs. command = ~30a     ;hold a for at least 30 ticks, then release
;   dollar ($) - Direction-only: detect as 4-way
;          egs. command = $D       ;will detect if D, DB or DF is held
;               command = $B       ;will detect if B, DB or UB is held
;   plus (+) - Buttons only: simultaneous press
;          egs. command = a+b      ;press a and b at the same time
;               command = x+y+z    ;press x, y and z at the same time
;   greater-than (>) - means there must be no other keys pressed or released
;                      between the previous and the current symbol.
;          egs. command = a, >~a   ;press a and release it without having hit
;                                  ;or released any other keys in between
;   You can combine the symbols:
;     eg. command = ~30$D, a+b     ;hold D, DB or DF for 30 ticks, release,
;                                  ;then press a and b together
;
;   Note: Successive direction symbols are always expanded in a manner similar
;         to this example:
;           command = F, F
;         is expanded when MUGEN reads it, to become equivalent to:
;           command = F, >~F, >F
;
;   It is recommended that for most "motion" commads, eg. quarter-circle-fwd,
;   you start off with a "release direction". This makes the command easier
;   to do.
;
; - time (optional)
;   Time allowed to do the command, given in game-ticks. The default
;   value for this is set in the [Defaults] section below. A typical
;   value is 15.
;
; - buffer.time (optional)
;   Time that the command will be buffered for. If the command is done
;   successfully, then it will be valid for this time. The simplest
;   case is to set this to 1. That means that the command is valid
;   only in the same tick it is performed. With a higher value, such
;   as 3 or 4, you can get a "looser" feel to the command. The result
;   is that combos can become easier to do because you can perform
;   the command early. Attacks just as you regain control (eg. from
;   getting up) also become easier to do. The side effect of this is
;   that the command is continuously asserted, so it will seem as if
;   you had performed the move rapidly in succession during the valid
;   time. To understand this, try setting buffer.time to 30 and hit
;   a fast attack, such as KFM's light punch.
;   The default value for this is set in the [Defaults] section below. 
;   This parameter does not affect hold-only commands (eg. /F). It
;   will be assumed to be 1 for those commands.
;
; If you have two or more commands with the same name, all of them will
; work. You can use it to allow multiple motions for the same move.
;
; Some common commands examples are given below.
;
; [Command] ;Quarter circle forward + x
; name = "QCF_x"
; command = ~D, DF, F, x
;
; [Command] ;Half circle back + a
; name = "HCB_a"
; command = ~F, DF, D, DB, B, a
;
; [Command] ;Two quarter circles forward + y
; name = "2QCF_y"
; command = ~D, DF, F, D, DF, F, y
;
; [Command] ;Tap b rapidly
; name = "5b"
; command = b, b, b, b, b
; time = 30
;
; [Command] ;Charge back, then forward + z
; name = "charge_B_F_z"
; command = ~60$B, F, z
; time = 10
;
; [Command] ;Charge down, then up + c
; name = "charge_D_U_c"
; command = ~60$D, U, c
; time = 10


;-| Button Remapping |-----------------------------------------------------
; This section lets you remap the player's buttons (to easily change the
; button configuration). The format is:
;   old_button = new_button
; If new_button is left blank, the button cannot be pressed.
[Remap]
x = x
y = y
z = z
a = a
b = b
c = c
s = s

;-| Default Values |-------------------------------------------------------
[Defaults]
; Default value for the "time" parameter of a Command. Minimum 1.
command.time = 15

; Default value for the "buffer.time" parameter of a Command. Minimum 1,
; maximum 30.
command.buffer.time = 1

;-| Single Button |---------------------------------------------------------
[Command]
name = "a"
command = a
time = 1

[Command]
name = "b"
command = b
time = 1

[Command]
name = "c"
command = c
time = 1

[Command]
name = "x"
command = x
time = 1

[Command]
name = "y"
command = y
time = 1

[Command]
name = "z"
command = z
time = 1

[Command]
name = "start"
command = s
time = 1

;-| Hold Dir |--------------------------------------------------------------
[Command]
name = "holdfwd";Required (do not remove)
command = /$F
time = 1

[Command]
name = "holdback";Required (do not remove)
command = /$B
time = 1

[Command]
name = "holdup" ;Required (do not remove)
command = /$U
time = 1

[Command]
name = "holddown";Required (do not remove)
command = /$D
time = 1

;-| Hold Button |----------------------------------------------------------
; Please define Anim 74140108 in your AIR file if AND ONLY IF you place these
; 7 Hold Button commands immediately after the 11 Single Button and Hold Dir
; commands at the very top of your CMD list, as demonstrated here.
; In this version of the AI code, these commands are only used by the XOR
; method, and thus are optional.  But there remains a possibility that a
; future version of the helper method might be helped by having these
; commands placed here, and Anim 74140108 would then be used to indicate
; that a partner character has a compatible CMD.

[Command]
name = "holda"
command = /a
time = 1

[Command]
name = "holdb"
command = /b
time = 1

[Command]
name = "holdc"
command = /c
time = 1

[Command]
name = "holdx"
command = /x
time = 1

[Command]
name = "holdy"
command = /y
time = 1

[Command]
name = "holdz"
command = /z
time = 1

[Command]
name = "holdstart"
command = /s
time = 1

;--- None of your own command definitions should be above this line. ---

;-| CPU |--------------------------------------------------------------
; Note that if you make any changes to the basic one-button or recovery
; commands, you'll need to make the same changes to their matching commands here
; and/or in the XOR VarSet controller.  That includes things like, for example:
;  * changing the recovery command to use a different combination of buttons.
;  * renaming the b button command as "d", or the start button command as "s".
;  * switching the button names around, e.g. so button y triggers "a" and button a triggers "y".
;  * having more than one way to trigger the same command name.
; If you understand how the XOR method works, the proper changes should be obvious.
; If you don't understand it, then simply disable the lines in the XOR VarSet
; controller that correspond to the commands you've altered.

[Command]
name = "a2"
command = a
time = 1

[Command]
name = "b2"
command = b
time = 1

[Command]
name = "c2"
command = c
time = 1

[Command]
name = "x2"
command = x
time = 1

[Command]
name = "y2"
command = y
time = 1

[Command]
name = "z2"
command = z
time = 1

[Command]
name = "start2"
command = s
time = 1

[Command]
name = "holdfwd2"
command = /$F
time = 1

[Command]
name = "holdback2"
command = /$B
time = 1

[Command]
name = "holdup2"
command = /$U
time = 1

[Command]
name = "holddown2"
command = /$D
time = 1

[Command]
name = "holda2"
command = /a
time = 1

[Command]
name = "holdb2"
command = /b
time = 1

[Command]
name = "holdc2"
command = /c
time = 1

[Command]
name = "holdx2"
command = /x
time = 1

[Command]
name = "holdy2"
command = /y
time = 1

[Command]
name = "holdz2"
command = /z
time = 1

[Command]
name = "holdstart2"
command = /s
time = 1

[Command]
name = "recovery2"
command = x+y
time = 1

;-| Super Motions |--------------------------------------------------------
;The following two have the same name, but different motion.
;Either one will be detected by a "command = TripleKFPalm" trigger.
;Time is set to 20 (instead of default of 15) to make the move
;easier to do.
;
[Command]
name = "QCFx2_2P"
command = ~D, DF, F, D, DF, F, x+y
time = 20

[Command]
name = "QCBx2_2P"
command = ~D, DB, B, D, DB, B, x+y
time = 20



[Command]
name = "QCFx2_P"
command = ~D, DF, F, D, DF, F, x
time = 20

[Command]
name = "QCFx2_P"
command = ~D, DF, F, D, DF, F, y
time = 20

[Command]
name = "QCBx2_P"
command = ~D, DB, B, D, DB, B, x
time = 20

[Command]
name = "QCBx2_P"
command = ~D, DB, B, D, DB, B, y
time = 20

[Command]
name = "QCFx2_K"
command = ~D, DF, F, D, DF, F, a
time = 20

[Command]
name = "QCFx2_K"
command = ~D, DF, F, D, DF, F, b
time = 20

[Command]
name = "QCBx2_K"
command = ~D, DB, B, D, DB, B, a
time = 20

[Command]
name = "QCBx2_K"
command = ~D, DB, B, D, DB, B, b
time = 20

[Command]
name = "QCFHCB_P"
command = ~D, DF, F, D, DB, B, x
time = 20
[Command]
name = "QCFHCB_P"
command = ~D, DF, F, D, DB, B, y
time = 20
[Command]
name = "QCFHCB_P"
command = ~D, F, D, B, x
time = 20
[Command]
name = "QCFHCB_P"
command = ~D, F, D, B, y
time = 20

[Command]
name = "QCBHCF_P"
command = ~D, DB, B, D, DF, F, x
time = 20
[Command]
name = "QCBHCF_P"
command = ~D, DB, B, D, DF, F, y
time = 20
[Command]
name = "QCBHCF_P"
command = ~D, B, D, F, x
time = 20
[Command]
name = "QCBHCF_P"
command = ~D, B, D, F, y
time = 20

[Command]
name = "Animality"
command = F,D,U
time = 15
[Command]
name = "r_Animality"
command = F,D,U
time = 15
[Command]
name = "Friendship"
command = ~F,~a,/B,y
time = 12

[Command]
name = "hissyfit"
command = ~30y

;-| Special Motions |------------------------------------------------------
[Command]
name = "HCB_p"
command = ~F, D, B, x
[Command]
name = "HCB_p"
command = ~F, D, B, y
[Command]
name = "HCB_p"
command = ~F, DF, D, DB, B, x
[Command]
name = "HCB_p"
command = ~F, DF, D, DB, B, y

[Command]
name = "HCF_p"
command = ~B, D, F, x
[Command]
name = "HCF_p"
command = ~B, D, F, y
[Command]
name = "HCF_p"
command = ~B, DB, D, DF, F, x
[Command]
name = "HCF_p"
command = ~B, DB, D, DF, F, y

[Command]
name = "upper_x"
command = ~F, D, DF, x

[Command]
name = "upper_y"
command = ~F, D, DF, y

[Command]
name = "upper_a"
command = ~F, D, DF, a

[Command]
name = "upper_b"
command = ~F, D, DF, b

[Command]
name = "rupper_x"
command = ~B, D, DB, x

[Command]
name = "rupper_y"
command = ~B, D, DB, y

[Command]
name = "rupper_a"
command = ~B, D, DB, a

[Command]
name = "rupper_b"
command = ~B, D, DB, b

[Command]
name = "QCF_x"
command = ~D, DF, F, x

[Command]
name = "QCF_y"
command = ~D, DF, F, y

[Command]
name = "QCF_xy"
command = ~D, DF, F, x+y

[Command]
name = "QCB_x"
command = ~D, DB, B, x

[Command]
name = "QCB_y"
command = ~D, DB, B, y

[Command]
name = "QCB_k"
command = ~D, DB, B, a

[Command]
name = "QCB_k"
command = ~D, DB, B, b

[Command]
name = "QCF_k"
command = ~D, DF, F, a

[Command]
name = "QCF_k"
command = ~D, DF, F, b

[Command]
name = "QCB_xy"
command = ~D, DB, B, x+y

[Command]
name = "BF_a"
command = ~B, F, a
time = 10

[Command]
name = "BF_b"
command = ~B, F, b
time = 10

[Command]
name = "FF_ab"
command = F, F, a+b

[Command]
name = "FF_a"
command = F, F, a

[Command]
name = "FF_b"
command = F, F, b

[Command]
name = "CD"
command = y+b
time = 1

[Command]
name = "dodge"
command = x+a
time = 1


;-| Double Tap |-----------------------------------------------------------
[Command]
name = "FF"     ;Required (do not remove)
command = F, F
time = 10

[Command]
name = "BB"     ;Required (do not remove)
command = B, B
time = 10

[Command]
name = "SupahJump"
;command = ~$D, $U
command = ~$D, $U
time = 5
buffer.time = 2

[Command]
name = "ChargedSupahJump"
;command = ~$D, $U
command = ~12$D, $U
time = 5
buffer.time = 2

[Command]
name = "upper_what"
command = ~15$D, $U, x
time = 10
[Command]
name = "upper_what"
command = ~15$D, $U, y
time = 10
[Command]
name = "upper_what"
command = ~15$D, $U, z
time = 10
[Command]
name = "upper_what"
command = ~15$D, $U, a
time = 10
[Command]
name = "upper_what"
command = ~15$D, $U, b
time = 10
[Command]
name = "upper_what"
command = ~15$D, $U, c
time = 10


;-| 2/3 Button Combination |-----------------------------------------------
[Command]
name = "recovery";Required (do not remove)
command = x+y
time = 1

;-| Dir + Button |---------------------------------------------------------
[Command]
name = "down_a"
command = /$D,a
time = 1

[Command]
name = "down_b"
command = /$D,b
time = 1


;---------------------------------------------------------------------------
; 2. State entry
; --------------
; This is where you define what commands bring you to what states.
;
; Each state entry block looks like:
;   [State -1, Label]           ;Change Label to any name you want to use to
;                               ;identify the state with.
;   type = ChangeState          ;Don't change this
;   value = new_state_number
;   trigger1 = command = command_name
;   . . .  (any additional triggers)
;
; - new_state_number is the number of the state to change to
; - command_name is the name of the command (from the section above)
; - Useful triggers to know:
;   - statetype
;       S, C or A : current state-type of player (stand, crouch, air)
;   - ctrl
;       0 or 1 : 1 if player has control. Unless "interrupting" another
;                move, you'll want ctrl = 1
;   - stateno
;       number of state player is in - useful for "move interrupts"
;   - movecontact
;       0 or 1 : 1 if player's last attack touched the opponent
;                useful for "move interrupts"
;
; Note: The order of state entry is important.
;   State entry with a certain command must come before another state
;   entry with a command that is the subset of the first.
;   For example, command "fwd_a" must be listed before "a", and
;   "fwd_ab" should come before both of the others.
;
; For reference on triggers, see CNS documentation.
;
; Just for your information (skip if you're not interested):
; This part is an extension of the CNS. "State -1" is a special state
; that is executed once every game-tick, regardless of what other state
; you are in.


; Don't remove the following line. It's required by the CMD standard.
[Statedef -1]

[State 0, AssertSpecial]
type = AssertSpecial
trigger1 = 1
flag = noairguard
ignorehitpause = 1


;===========================================================================
;This is not a move, but it sets up var(1) to be 1 if conditions are right
;for a combo into a special move (used below).
;Since a lot of special moves rely on the same conditions, this reduces
;redundant logic.
[State -1, Combo condition Reset]
type = VarSet
trigger1 = 1
var(9) = 0

[State -1, Combo condition Check]
type = VarSet
triggerall = ishelper
trigger1 = statetype != A
trigger1 = ctrl
trigger2 = stateno = 100 || stateno = 40
trigger3 = stateno = 0 || stateno = 11
trigger4 = stateno = [20,22]
var(9) = 1

[State -1, AI Consideration reset]
type = VarSet
trigger1 = stateno != 40
var(52) = 0
ignorehitpause = 1

;triggerall = ( p2dist y + (enemynear,const(size.head.pos.y) / ifelse(p2statetype=C,2,1) ) ) <= ifelse(anim=200,-84,-100)*const(size.yscale)

; For everyone


;===========================================================================

; Turn!
;[State -1, Stand Light Punch]
;type = ChangeState
;value = 100
;triggerall = ishelper
;triggerall = roundstate = 2
;triggerall = backedgedist < -20
;triggerall = var(16) = 0
;trigger1 = statetype = S
;trigger1 = var(9)

;---------------------------------------------------------------------------
; Turn!
[State -1, Turn]
type = ChangeState
value = 5
triggerall = ishelper
triggerall = roundstate = [2,3]
trigger1 = statetype = S
trigger1 = stateno = 0 || stateno = 20 || stateno = 21
trigger1 = p2bodydist x < -10
trigger1 = p2dist x < 0

[State -1, Get up and fight]
type = ChangeState
value = 12
triggerall = ishelper
triggerall = roundstate = 2
triggerall = statetype = C
triggerall = stateno != 12
trigger1 = p2bodydist x < -10
trigger2 = time >= 200

; You lose!
[State -1, Lose]
type = ChangeState
value = 170
triggerall = ishelper
trigger1 = statetype = S
trigger1 = var(9)
trigger1 = root, alive = 0

; RYou win!
[State -1, WIN]
type = ChangeState
value = 180
triggerall = ishelper
trigger1 = statetype != A
trigger1 = stateno = 0 || stateno = 11
trigger1 = root, stateno = [180,189]

[State 0, ]
type = VarSet
triggerall = ishelper
trigger1 = alive
trigger1 = var(10) > 0
var(10) = 0
ignorehitpause = 1
[State 0, ]
type = VarAdd
triggerall = ishelper
trigger1 = !alive
trigger1 = var(10) < 6
var(10) = 1
ignorehitpause = 1

[State 5150, 1]
type = parentvaradd
triggerall = ishelper
trigger1 = var(10) = 2
var(53) = 1
ignorehitpause = 1


;===========================================================================
;---------------------------------------------------------------------------
; Die!
[State -1, DIE]
type = SelfState
value = 5150
;trigger1 = ishelper
trigger1 = !alive
trigger1 = stateno != 5150
;trigger1 = stateno != 3010

[State 0, Screenbound]
type = ScreenBound
triggerall = ishelper
trigger1 = stateno != [3000,3999]
trigger1 = stateno != [110,119]
;value = (movetype=H && stateno != 5150)
;value = (stateno != [110,119])
value = (stateno != 5150)
movecamera = (stateno != 5150),0
ignorehitpause = 1

; Grappler AI

[State AI, Mock the opponent]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+var(55)
triggerall = ishelper
triggerall = roundstate >= 2
triggerall = (statetype != A)
triggerall = ctrl || stateno = 100 || stateno = 40 || stateno = 0 || stateno = 20
triggerall = backedgedist >= 0
triggerall = frontedgedist >= 0
trigger1 = p2statetype = L
trigger2 = var(40) = 1
trigger3 = p2movetype = H
trigger3 = p2stateno != [120,169]
trigger4 = p2dist x > 0
trigger4 = win
var(52) = 181
ignorehitpause = 1

[State AI, Slap]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+(var(55)*2)
triggerall = random < (9*(var(55)*var(55)))
triggerall = p2stateno != [5080,5130]
triggerall = p2bodydist x = [ifelse(p2statetype!=A,-8,-10),(44*const(size.xscale))-(5*movecontact)]
triggerall = p2dist y >= (-20*const(size.yscale)) - (enemynear,vel y*14)
;triggerall = ( p2dist y + (enemynear,const(size.head.pos.y) / ifelse(p2statetype=C,2,1) ) ) <= -20*const(size.yscale)
triggerall = statetype != A
triggerall = time >= 7-var(55) || random < 10
triggerall = frontedgedist >= 0
triggerall = backedgedist >= 0
trigger1 = prevstateno = 52 || prevstateno = 405
trigger1 = stateno != 40
trigger1 = stateno != 20 || random < 500 || p2movetype = H
trigger1 = ctrl || stateno = 0 || (stateno = [20,29]) || (stateno = 100 && random < 10)
var(52) = 200
ignorehitpause = 1

[State AI, KAMIKAZE]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+(var(55)*2)
triggerall = random < (9*(var(55)*var(55)))
triggerall = p2stateno != [5080,5130]
triggerall = p2bodydist x = [ifelse(p2statetype!=A,-8,-10),(111*const(size.xscale))]
triggerall = p2dist y >= (-36*const(size.yscale)) - (enemynear,vel y*18)
triggerall = ( p2dist y + (enemynear,const(size.head.pos.y) / ifelse(p2statetype=C,2,1) ) ) <= -32*const(size.yscale)
triggerall = statetype != A
triggerall = time >= 7-var(55) || random < 10
triggerall = frontedgedist >= 0
triggerall = backedgedist >= 0
triggerall = life <= ceil(lifemax/2)
trigger1 = prevstateno = 52 || prevstateno = 405
trigger1 = stateno != 40
trigger1 = stateno != 20 || random < 500 || p2movetype = H
trigger1 = ctrl || stateno = 0 || (stateno = [20,29]) || (stateno = 100 && random < 10)
trigger2 = stateno = 200
trigger2 = movehit
trigger2 = animelemtime(7) >= 0
var(52) = 3000
ignorehitpause = 1

[State AI, Somersault]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+(var(55)*2)
triggerall = random < (9*(var(55)*var(55)))
triggerall = p2stateno != [5080,5130]
triggerall = p2bodydist x = [ifelse(p2statetype!=A,-8,-10),(35*const(size.xscale))]
triggerall = p2dist y >= (-135*const(size.yscale)) - (enemynear,vel y*14)
triggerall = ( p2dist y + (enemynear,const(size.head.pos.y) / ifelse(p2statetype=C,2,1) ) ) <= -64*const(size.yscale)
triggerall = statetype != A
triggerall = time >= 7-var(55) || random < 10
triggerall = frontedgedist >= 0
triggerall = backedgedist >= 0
trigger1 = prevstateno = 52 || prevstateno = 405
trigger1 = stateno != 40
trigger1 = stateno != 20 || random < 500 || p2movetype = H
trigger1 = ctrl || stateno = 0 || (stateno = [20,29]) || (stateno = 100 && random < 10)
trigger2 = stateno = 200
trigger2 = movehit
trigger2 = animelemtime(7) >= 0
var(52) = 410
ignorehitpause = 1

[State AI, Headbutt]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+(var(55)*2)
triggerall = random < (9*(var(55)*var(55)))
triggerall = p2stateno != [5080,5130]
triggerall = p2bodydist x = [ifelse(p2statetype!=A,-8,-10),(79*const(size.xscale))]
triggerall = p2dist y >= (-40*const(size.yscale)) - (enemynear,vel y*15)
triggerall = ( p2dist y + (enemynear,const(size.head.pos.y) / ifelse(p2statetype=C,2,1) ) ) <= -36*const(size.yscale)
triggerall = statetype != A
triggerall = time >= 7-var(55) || random < 10
triggerall = frontedgedist >= 0
triggerall = backedgedist >= 0
trigger1 = prevstateno = 52 || prevstateno = 405
trigger1 = stateno != 40
trigger1 = stateno != 20 || random < 500 || p2movetype = H
trigger1 = ctrl || stateno = 0 || (stateno = [20,29]) || (stateno = 100 && random < 10)
trigger2 = stateno = 200
trigger2 = movehit
trigger2 = animelemtime(7) >= 0
var(52) = 220
ignorehitpause = 1

[State AI, Acid]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+(var(55)*2)
triggerall = random < (9*(var(55)*var(55)))
triggerall = p2stateno != [5080,5130]
triggerall = (p2bodydist x <= 164*const(size.xscale)) || (random < 100)
triggerall = (p2dist y >= (-20*const(size.yscale)) - (enemynear,vel y*4)) || (random < 100)
triggerall = statetype != A
triggerall = time >= 7-var(55) || random < 10
triggerall = frontedgedist >= 0
triggerall = backedgedist >= 0
triggerall = prevstateno = 52 || prevstateno = 405
triggerall = power >= 1000
triggerall = !numhelper(2000)
trigger1 = stateno != 40
trigger1 = stateno != 20 || random < 500 || p2movetype = H
trigger1 = ctrl || stateno = 0 || (stateno = [20,29]) || (stateno = 100 && random < 10)
var(52) = 2000
ignorehitpause = 1

[State AI, Shoot]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+(var(55)*2)
triggerall = random < (7*(var(55)*var(55)))
triggerall = p2stateno != [5080,5130]
triggerall = p2bodydist x >= 64*const(size.xscale)
triggerall = p2dist y >= (-20*const(size.yscale)) - (enemynear,vel y*13)
;triggerall = ( p2dist y + (enemynear,const(size.head.pos.y) / ifelse(p2statetype=C,2,1) ) ) <= -20*const(size.yscale)
triggerall = statetype != A
triggerall = time >= 7-var(55) || random < 10
triggerall = frontedgedist >= 0
triggerall = backedgedist >= 0
triggerall = prevstateno = 52 || prevstateno = 405
triggerall = !numprojid(211)
trigger1 = stateno != 40
trigger1 = stateno != 20 || random < 500 || p2movetype = H
trigger1 = ctrl || stateno = 0 || (stateno = [20,29]) || (stateno = 100 && random < 10)
var(52) = 210
ignorehitpause = 1

[State AI, JUMP AROUND]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+var(55)
triggerall = ishelper
triggerall = roundstate = 2
triggerall = (statetype != A)
triggerall = frontedgedist >= 0
triggerall = backedgedist >= 0
trigger1 = prevstateno != 52 && prevstateno != 405
trigger1 = ctrl || stateno = 100 || stateno = 40 || stateno = 0 || stateno = 20
var(52) = ifelse(random<500,ifelse(random<500,400,405),ifelse(p2bodydist x>=20,41,42))
ignorehitpause = 1

[State AI, GET OVER HERE]
type = VarSet
triggerall = numenemy
triggerall = var(52) = 0 || random < 80+var(55)
triggerall = ishelper
triggerall = (statetype != A)
triggerall = frontedgedist < 0 || backedgedist < 0
trigger1 = ctrl || stateno = 100 || stateno = 40 || stateno = 0 || stateno = 20
var(52) = ifelse(random<500,400,405)
ignorehitpause = 1

[State -1, Slap]
type = ChangeState
value = 200
triggerall = ishelper
triggerall = var(52) = 200
trigger1 = stateno = [0,23]

[State -1, Shoot]
type = ChangeState
value = 210
triggerall = ishelper
triggerall = var(52) = 210
trigger1 = stateno = [0,23]

[State -1, Headbutt]
type = ChangeState
value = 220
triggerall = ishelper
triggerall = var(52) = 220
trigger1 = stateno = [0,23]
trigger2 = stateno = 200
trigger2 = animelemtime(7) >= 0

[State -1, Lol]
type = ChangeState
value = 181
triggerall = ishelper
triggerall = var(52) = 181
trigger1 = stateno = [0,23]

[State -1, Dig]
type = ChangeState
value = 400
triggerall = ishelper
triggerall = var(52) = 400
trigger1 = stateno = [0,23]

[State -1, Dig]
type = ChangeState
value = 405
triggerall = ishelper
triggerall = var(52) = 405
trigger1 = stateno = [0,23]

[State -1, Flash Kick]
type = ChangeState
value = 410
triggerall = ishelper
triggerall = var(52) = 410
trigger1 = stateno = [0,23]
trigger2 = stateno = 200
trigger2 = animelemtime(7) >= 0

[State -1, ACid]
type = ChangeState
value = 2000
triggerall = ishelper
triggerall = var(52) = 2000
triggerall = power >= 1000
trigger1 = stateno = [0,23]
trigger2 = stateno = 200
trigger2 = animelemtime(7) >= 0

[State -1, Kamikaze]
type = ChangeState
value = 3000
triggerall = ishelper
triggerall = var(52) = 3000
trigger1 = stateno = [0,23]
trigger2 = stateno = 200
trigger2 = animelemtime(7) >= 0

[State -1, Jump]
type = ChangeState
value = 40
triggerall = ishelper
triggerall = var(52) = [40,43]
trigger1 = stateno = [0,23]

[State 0, AssertSpecial]
type = AssertSpecial
trigger1 = ishelper
flag = nostandguard
flag2 = nocrouchguard
flag3 = noairguard
ignorehitpause = 1

[State Spawn more of them]
type = Helper
triggerall = !ishelper
triggerall = ctrl
triggerall = numhelper(666) < 3 ;+(roundsexisted>=1)
triggerall = life>10*numhelper(666)
trigger1 = command = "x" || command = "a" || command = "y" || command = "b" || command = "z" || command = "c"
helpertype = player
name = "Dude"
ID = 666
pos = 0+random%320,0
postype = back
facing = 1
stateno = 110
keyctrl = 1
ownpal = 1
size.ground.back = 20
size.ground.front = 19
size.air.back = 20
size.air.front = 19
size.height = 60
size.attack.dist = 160
size.head.pos = -5, -108
size.mid.pos = 0, -55
ignorehitpause = 1




